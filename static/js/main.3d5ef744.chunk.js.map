{"version":3,"sources":["components/PostForm.js","Post.js","components/EditComponent.js","components/AllPost.js","components/Home.js","App.js","serviceWorker.js","reducers/postReducer.js","index.js"],"names":["PostForm","handleSubmit","e","preventDefault","title","_this","getTitle","value","description","getDescription","data","id","Date","editing","props","dispatch","type","_this2","this","react_default","a","createElement","Form_default","onSubmit","Label","Control","required","ref","input","placeholder","cols","Button_default","variant","React","Component","connect","Post","post","onClick","EditComponent","handleEdit","newTitle","newDescription","defaultValue","AllPost","className","posts","map","key","components_EditComponent","src_Post","state","Home","style","width","height","margin","Container_default","Row_default","Col_default","xs","components_PostForm","components_AllPost","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","postReducer","arguments","length","undefined","action","concat","filter","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d5ef744.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n\r\nclass PostForm extends React.Component{\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const title = this.getTitle.value;\r\n        const description = this.getDescription.value;\r\n        const data = {\r\n            id: new Date(),\r\n            title,\r\n            description,\r\n            editing: false\r\n        }\r\n    \r\n            this.props.dispatch({\r\n                type:'ADD_POST',\r\n                data});\r\n              this.getTitle.value = '';\r\n              this.getDescription.value = '';\r\n          \r\n    }\r\n render(){\r\n     return(\r\n        <div>\r\n          <h1>Create Post</h1>\r\n            <Form onSubmit={this.handleSubmit}>\r\n             <Form.Label>Title</Form.Label>\r\n              <Form.Control required type=\"text\" ref={(input)=>this.getTitle=input}\r\n                placeholder=\"Enter Post Title\" />\r\n            <br/>\r\n             <Form.Label>Description</Form.Label>\r\n              <Form.Control required type=\"text\" ref={(input)=>this.getDescription =input} cols=\"28\" \r\n                placeholder=\"Enter Post\" />\r\n            <br/>\r\n             <Button variant=\"info\" type=\"submit\">Post</Button>\r\n            </Form>\r\n        </div>\r\n     )\r\n }\r\n}\r\n\r\nexport default connect()(PostForm);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass Post extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>{this.props.post.title}</h2>\r\n                <p>{this.props.post.description}</p>\r\n             <div>\r\n             <Button onClick={()=>this.props.dispatch({type:'EDIT_POST', id:this.props.post.id})} \r\n                variant=\"info\">Edit</Button>\r\n             <Button onClick={()=>this.props.dispatch({type:'DELETE_POST', id:this.props.post.id})} \r\n               variant=\"warning\">Delete</Button> \r\n             </div>\r\n                 \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(Post);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass EditComponent extends React.Component{\r\n    handleEdit = (e) => {\r\n        e.preventDefault();\r\n        const newTitle = this.getTitle.value;\r\n        const newDescription = this.getDescription.value;\r\n        const data = {\r\n            newTitle,\r\n            newDescription\r\n        }\r\n        this.props.dispatch({type: 'UPDATE', id: this.props.post.id, data: data})\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Edit port</h1>\r\n                <Form onSubmit={this.handleEdit}>\r\n             <Form.Label>Titulo</Form.Label>\r\n             <Form.Control required type=\"text\" ref={(input)=>this.getTitle=input}\r\n               defaultValue={this.props.post.title}  placeholder=\"Enter Post Edit\" />\r\n            <br/>\r\n             <Form.Label>Description</Form.Label>\r\n             <Form.Control required type=\"text\" ref={(input)=>this.getDescription =input} \r\n             defaultValue={this.props.post.description} cols=\"28\" \r\n                placeholder=\"Enter Post Edit\" />\r\n            <br/>\r\n              <Button variant=\"primary\" type=\"submit\">Update</Button>\r\n            </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(EditComponent);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Post from '../Post';\r\nimport EditComponent from './EditComponent';\r\n\r\nclass AllPost extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n            <h1>Views</h1>\r\n             <div className=\"conteiner_all\">\r\n                {this.props.posts.map((post) => (\r\n                <div key={post.id}>\r\n                {post.editing ? <EditComponent post={post} key={post.id} /> : <Post post={post}\r\n                key={post.id} />}\r\n             </div>\r\n  ))}\r\n             </div>\r\n              \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(AllPost);","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PostForm from './PostForm';\r\nimport AllPost from './AllPost';\r\n\r\nclass Home extends React.Component{\r\n    render(){\r\n        return(\r\n        <div style={{width: \"100%\", height:\"100%\", margin: \"auto\"}}>\r\n           <Container className=\"home-container\">\r\n            <Row>\r\n              <Col xs={6} className=\"home-post\">\r\n              <PostForm/>\r\n              </Col>\r\n              <Col xs={6} className=\"home-post\">\r\n              <AllPost/>\r\n              </Col>\r\n            </Row>\r\n           </Container>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\nimport PostForm from './components/PostForm';\r\nimport AllPost from './components/AllPost';\r\nimport Home from './components/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter>\r\n       <Switch>\r\n        <Route exact path =\"/\" component={Home}/>\r\n        <Route path =\"/PostForm\" component={PostForm}/>\r\n        <Route path =\"/AllPost\" component={AllPost}/>\r\n       </Switch>\r\n      </HashRouter>        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const postReducer = (state = [], action) => {\r\n    switch(action.type){\r\n        case 'ADD_POST':\r\n            return state.concat([action.data]);\r\n        case 'DELETE_POST':\r\n            return state.filter(post=>post.id !== action.id);\r\n        case 'EDIT_POST':\r\n            return state.map(post=>post.id === action.id ? {...post,editing:!post.editing}:post)\r\n        case 'UPDATE':\r\n            return state.map(post=>{\r\n                if(post.id === action.id){\r\n                    return{\r\n                        ...post,\r\n                        title:action.data.newTitle,\r\n                        description:action.data.newDescription,\r\n                        editing: !post.editing\r\n                    }\r\n                } else return post;\r\n            })\r\n            default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport postReducer from './reducers/postReducer';\r\n\r\nconst store = createStore(postReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store ={store}>\r\n    <App />\r\n  </Provider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}