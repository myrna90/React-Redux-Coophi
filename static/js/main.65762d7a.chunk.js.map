{"version":3,"sources":["components/PostForm.js","Post.js","components/EditComponent.js","components/AllPost.js","components/Home.js","App.js","serviceWorker.js","reducers/postReducer.js","index.js"],"names":["PostForm","handleSubmit","e","preventDefault","title","getTitle","value","description","getDescription","data","id","Date","editing","props","dispatch","type","onSubmit","this","Label","Control","required","ref","input","placeholder","cols","variant","React","Component","connect","Post","post","onClick","EditComponent","handleEdit","newTitle","newDescription","defaultValue","AllPost","className","posts","map","key","state","Home","xs","App","exact","path","component","Boolean","window","location","hostname","match","postReducer","action","concat","filter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65762d7a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n\r\nclass PostForm extends React.Component{\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const title = this.getTitle.value;\r\n        const description = this.getDescription.value;\r\n        const data = {\r\n            id: new Date(),\r\n            title,\r\n            description,\r\n            editing: false\r\n        }\r\n    \r\n            this.props.dispatch({\r\n                type:'ADD_POST',\r\n                data});\r\n              this.getTitle.value = '';\r\n              this.getDescription.value = '';\r\n          \r\n    }\r\n render(){\r\n     return(\r\n         <div>\r\n          <h1>Create Post</h1>\r\n            <Form onSubmit={this.handleSubmit}>\r\n             <Form.Label>Titulo</Form.Label>\r\n             <Form.Control required type=\"text\" ref={(input)=>this.getTitle=input}\r\n                 placeholder=\"Enter Post Title\" />\r\n            <br/>\r\n             <Form.Label>Description</Form.Label>\r\n             <Form.Control required type=\"text\" ref={(input)=>this.getDescription =input} cols=\"28\" \r\n                placeholder=\"Enter Post\" />\r\n            <br/>\r\n              <Button variant=\"primary\" type=\"submit\">Post</Button>\r\n            </Form>\r\n         </div>\r\n     )\r\n }\r\n}\r\n\r\nexport default connect()(PostForm);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass Post extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h2>{this.props.post.title}</h2>\r\n                <p>{this.props.post.description}</p>\r\n             <div>\r\n             <Button onClick={()=>this.props.dispatch({type:'EDIT_POST', id:this.props.post.id})} \r\n                variant=\"info\">Edit</Button>\r\n               <Button onClick={()=>this.props.dispatch({type:'DELETE_POST', id:this.props.post.id})} \r\n               variant=\"danger\">Delete</Button> \r\n             </div>\r\n                 \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(Post);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass EditComponent extends React.Component{\r\n    handleEdit = (e) => {\r\n        e.preventDefault();\r\n        const newTitle = this.getTitle.value;\r\n        const newDescription = this.getDescription.value;\r\n        const data = {\r\n            newTitle,\r\n            newDescription\r\n        }\r\n        this.props.dispatch({type: 'UPDATE', id: this.props.post.id, data: data})\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Edit port</h1>\r\n                <Form onSubmit={this.handleEdit}>\r\n             <Form.Label>Titulo</Form.Label>\r\n             <Form.Control required type=\"text\" ref={(input)=>this.getTitle=input}\r\n               defaultValue={this.props.post.title}  placeholder=\"Enter Post Edit\" />\r\n            <br/>\r\n             <Form.Label>Description</Form.Label>\r\n             <Form.Control required type=\"text\" ref={(input)=>this.getDescription =input} \r\n             defaultValue={this.props.post.description} cols=\"28\" \r\n                placeholder=\"Enter Post Edit\" />\r\n            <br/>\r\n              <Button variant=\"primary\" type=\"submit\">Update</Button>\r\n            </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(EditComponent);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Post from '../Post';\r\nimport EditComponent from './EditComponent';\r\n\r\nclass AllPost extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n             <h1 className=\"post_heading\">All Posts</h1>\r\n              {this.props.posts.map((post) => (\r\n                <div key={post.id}>\r\n                {post.editing ? <EditComponent post={post} key={post.id} /> : <Post post={post}\r\n                key={post.id} />}\r\n            </div>\r\n            ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(AllPost);","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport PostForm from './PostForm';\r\nimport AllPost from './AllPost';\r\n\r\nclass Home extends React.Component{\r\n    render(){\r\n        return(\r\n        <div>\r\n         <h1>Home</h1>\r\n           <Container>\r\n            <Row>\r\n              <Col xs={4}>\r\n              <PostForm/>\r\n              </Col>\r\n              <Col xs={4}>\r\n              <AllPost/>\r\n              </Col>\r\n            </Row>\r\n           </Container>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport PostForm from './components/PostForm';\nimport AllPost from './components/AllPost';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n         <Switch>\n           <Route exact path =\"/\" component={Home}/>\n           <Route path =\"/PostForm\" component={PostForm}/>\n           <Route path =\"/AllPost\" component={AllPost}/>\n         </Switch>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const postReducer = (state = [], action) => {\r\n    switch(action.type){\r\n        case 'ADD_POST':\r\n            return state.concat([action.data]);\r\n        case 'DELETE_POST':\r\n            return state.filter(post=>post.id !== action.id);\r\n        case 'EDIT_POST':\r\n            return state.map(post=>post.id === action.id ? {...post,editing:!post.editing}:post)\r\n        case 'UPDATE':\r\n            return state.map(post=>{\r\n                if(post.id === action.id){\r\n                    return{\r\n                        ...post,\r\n                        title:action.data.newTitle,\r\n                        description:action.data.newDescription,\r\n                        editing: !post.editing\r\n                    }\r\n                } else return post;\r\n            })\r\n            default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport postReducer from './reducers/postReducer';\nimport { BrowserRouter} from 'react-router-dom'\n\nconst store = createStore(postReducer);\n\nReactDOM.render(\n    <BrowserRouter>\n    <Provider store ={store}>\n     <App />\n  </Provider>\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}